보안 문제

** 내 코드의 보안문제

클라이언트 쪽에 중요한 정보를 코드로 작성하면 유저가 브라우져 검사에서 내 코드를 볼 수 있어서
중요한 정보를 뺏을 수 있다.
 예)  몽고DB와 같은 데이터 베이스 서버에 접속하기 위한 내 개인 아이디와 비밀번호가 노출될 수 있다.



** Cross-Site Scripting Attacks (XSS)

내 코드에 해커가 접근해서 필요한 정보를 빼가는 코드를 집어넣고 실행할 수 있다.

예)주소창에 있는 정보를 가져와 innerHTML 로 화면에 보여지도록 하면 유저가 주소창에 HTML 코드를 사용해서 
 새로운 코드를 집어넣어 필요한 정보를 뺄 수 있다.  그래서 innerHTML 말고 textContent와 같은 코드를 사용해야 한다.

sanitize-html과 같은 3rd-party package를 받으면 공격에 취약한 코드를 필터링 해준다.

npm install sanitize-html --save 로 받고 

필요한 파일에  import sanitizeHtml from 'sanitize-html' 로 불러와서 
공격에 취약해보이는 요소를  sanitizeHtml로 감싸면  (예) sanitizeHtml(취약요소))
외부에서 그 부분을 바꾸려고 할 때 알아서 제거해준다.



** 3rd-party package 보안문제

믿을만한 패키지가 아니면 그 패키지 안에 보안을 뚫는 코드가 들어 있을 수도 있다.
git hub 같은 곳에서 코드를 살펴보고 받으면 좋지만 무리니까
npm install 로 다운 받을 때 vulnerable 한 요소가 있는지 확인한다.
유명한 패키지들은 받아서 사용해도 보안문제는 크게 걱정하지 않아도 되지만
패키지를 통해서 보안이 뚫릴 수도 있다는 사실


** Cross-Site Request Forgery (CSRF)

일반 인터넷 뱅킹과 같은 어플을 사용할때 유저의 접속정보는 서버에 세션으로 남고
그 세션이 내 세션아이디 정보를 유저가 들어온 ip 주소로 보내서 그 정보를 유저는 홈페이지의 쿠키로 가지고 있는다.

여기서 해커가 기존에 사용하는 인터넷 뱅킹 어플과 유사한 가짜 사이트를 만든다
만든 해커는 나에게 메일로 사기 사이트 링크를 보내고 그 사이트에 내가 들어가면 쿠기와 서버의 세션으로 원래 어플의 
정보를 이용하여 제 3자에게 돈을 보내게 할 수도 있다.



**  Cross-Origin Resource Sharing (CORS)

공격의 패턴은 없지만 보안상의 개념
같은 도메인끼리만 정보를 공유하도록 막아둔 장치
서버 쪽에 코드를 작성해서 장치를 해제할 수 있다

예제)
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader("Access-Control-Allow-Method", "POST, GET, OPTIONS");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type");